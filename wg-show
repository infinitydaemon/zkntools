#!/bin/bash

# Function to check and display connected users from WireGuard using `wg show`
check_connected_users() {
    # Get the list of connected peers from wg show
    connected_users=$(sudo wg show)

    if [[ -z "$connected_users" ]]; then
        echo -e "\033[1;31mNo users connected to WireGuard.\033[0m"
    else
        # Display header
        echo -e "\033[1;32m::: Connected Clients List :::\033[0m"
        echo -e "\033[1;34mName               Remote IP                  Virtual IP       Last Handshake\033[0m"

        # Extract relevant details from the wg show output
        # Example output from `sudo wg show` looks like:
        # peer: <peer-public-key>
        #   endpoint: <peer-ip>:<peer-port>
        #   allowed ips: <virtual-ip>/32
        #   latest handshake: <timestamp>

        while read -r user; do
            if [[ "$user" =~ "peer" ]]; then
                peer=$(echo "$user" | awk '{print $2}')
                remote_ip=$(sudo wg show wg0 | grep "$peer" -A 4 | grep "endpoint" | awk '{print $2}' | sed 's/://')
                virtual_ip=$(sudo wg show wg0 | grep "$peer" -A 4 | grep "allowed ips" | awk '{print $3}')
                last_handshake=$(sudo wg show wg0 | grep "$peer" -A 4 | grep "latest handshake" | awk '{print $3, $4}')

                # Colorize output for each client
                echo -e "\033[1;36m$peer\033[0m   \033[1;33m$remote_ip\033[0m   \033[1;32m$virtual_ip\033[0m   \033[1;37m$last_handshake\033[0m"
            fi
        done <<< "$connected_users"
    fi
}

# Function to check CPU usage of all kworker threads related to wg-crypt-wg0
check_cpu_usage() {
    # Get CPU usage for all kworker threads containing 'wg-crypt-wg0'
    cpu_usage=$(ps -eo pid,%cpu,command | grep 'kworker.*wg-crypt-wg0')

    if [[ -z "$cpu_usage" ]]; then
        echo -e "\033[1;31mNo kworker threads found related to wg-crypt-wg0.\033[0m"
    else
        echo -e "\033[1;34mCPU usage for kworker threads related to wg-crypt-wg0:\033[0m"
        echo -e "\033[1;36m$cpu_usage\033[0m"
    fi
}

# Function to create a smooth visual heartbeat animation for live updates
visual_heartbeat() {
    echo -e "\033[1;35m>> Heartbeat: \033[0m"
    for i in {1..10}; do
        printf "\033[1;33m.\033[0m"
        sleep 0.2
    done
    echo ""
}

# Function to display CPU usage progress bar
display_cpu_usage_progress() {
    total_cpu=$(ps -eo %cpu | awk '{s+=$1} END {print s}')
    cpu_usage_percent=$(echo "scale=2; $total_cpu/$(nproc)" | bc)
    printf "\033[1;34mCPU Usage: [\033[1;32m"
    for i in $(seq 1 $cpu_usage_percent); do
        printf "="
    done
    printf "\033[0m] %.2f%%\n" "$cpu_usage_percent"
}

# Main function to run the dashboard
monitor_dashboard() {
    while true; do
        # Move cursor to the top-left corner to overwrite output
        echo -ne "\033[H"
        
        # Display real-time data with color
        check_connected_users
        echo ""
        check_cpu_usage
        echo ""

        # Display the CPU usage progress bar in color
        display_cpu_usage_progress
        echo ""

        # Display visual heartbeat animation
        visual_heartbeat

        # Sleep and refresh every 2 seconds
        sleep 2
    done
}

# Start the real-time monitoring dashboard
monitor_dashboard
