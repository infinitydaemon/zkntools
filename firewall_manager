# zktools easy firewall manager to block / unblock countries in case of a DDoS attack on datacentre. 
# The reason for this is sometimes the datacentre redirects legit traffic to their null routes without any notification.
# This can also be used for SOHO / Homme users for Edge Node 400.

#!/bin/bash

# Exit on error
set -e

# List of countries with their codes
declare -A countries=(
    ["China"]="CN"
    ["United States"]="US"
    ["Russia"]="RU"
    ["Germany"]="DE"
    ["India"]="IN"
    ["Brazil"]="BR"
    ["United Kingdom"]="GB"
    ["France"]="FR"
    ["Japan"]="JP"
    ["South Korea"]="KR"
)

# Check if required commands are available
for cmd in dialog wget ipset iptables; do
    if ! command -v "$cmd" &> /dev/null; then
        echo "Error: $cmd is required but not installed."
        exit 1
    fi
done

# Function to download IP ranges from IP2Location
download_ip_ranges() {
    local country_code=$1
    local output_file="/tmp/${country_code}.txt"

    # Download the IP ranges
    if ! wget -q -O "$output_file" "https://cdn-lite.ip2location.com/datasets/${country_code}.txt"; then
        dialog --msgbox "Failed to download IP ranges for $country_code.\nCheck your internet connection." 10 60
        return 1
    fi

    # Check if the file is empty
    if [ ! -s "$output_file" ]; then
        dialog --msgbox "Downloaded IP ranges file is empty.\nThe country code might be invalid." 10 60
        rm -f "$output_file"
        return 1
    fi

    return 0
}

# Function to block a country
block_country() {
    local options=()
    for country in "${!countries[@]}"; do
        options+=("$country" "${countries[$country]}")
    done

    local choice
    choice=$(dialog --menu "Select a country to block:" 20 60 10 "${options[@]}" 2>&1 >/dev/tty) || return
    [ -z "$choice" ] && return

    local country_code=${countries[$choice]}
    dialog --infobox "Blocking $choice ($country_code)..." 10 40
    sleep 1

    if ! download_ip_ranges "$country_code"; then
        return
    fi

    # Check if ipset already exists and flush it if it does
    if sudo ipset list "$country_code" &>/dev/null; then
        sudo ipset flush "$country_code"
    else
        sudo ipset create "$country_code" hash:net
    fi

    # Add IP ranges to the ipset
    while IFS= read -r ip; do
        sudo ipset add "$country_code" "$ip" 2>/dev/null || true
    done < "/tmp/${country_code}.txt"
    rm -f "/tmp/${country_code}.txt"

    # Add iptables rules if they don't exist
    iptables -C INPUT -m set --match-set "$country_code" src -j DROP 2>/dev/null || \
        sudo iptables -I INPUT -m set --match-set "$country_code" src -j DROP
    iptables -C FORWARD -m set --match-set "$country_code" src -j DROP 2>/dev/null || \
        sudo iptables -I FORWARD -m set --match-set "$country_code" src -j DROP

    dialog --msgbox "$choice ($country_code) blocked successfully!" 10 40
}

# Function to unblock a country
unblock_country() {
    local ipsets
    ipsets=$(sudo ipset list -n | grep -E '^[A-Z]{2}$' || true)
    
    if [ -z "$ipsets" ]; then
        dialog --msgbox "No countries are currently blocked!" 10 40
        return
    fi

    local options=()
    for set in $ipsets; do
        options+=("$set" "")
    done

    local choice
    choice=$(dialog --menu "Select a country to unblock:" 20 60 10 "${options[@]}" 2>&1 >/dev/tty) || return
    [ -z "$choice" ] && return

    sudo iptables -D INPUT -m set --match-set "$choice" src -j DROP 2>/dev/null || true
    sudo iptables -D FORWARD -m set --match-set "$choice" src -j DROP 2>/dev/null || true
    sudo ipset destroy "$choice" 2>/dev/null || true

    dialog --msgbox "$choice unblocked successfully!" 10 40
}

# Function to display blocked countries
show_blocked_countries() {
    local ipsets
    ipsets=$(sudo ipset list -n | grep -E '^[A-Z]{2}$' || true)
    
    if [ -z "$ipsets" ]; then
        dialog --msgbox "No countries are currently blocked!" 10 40
    else
        dialog --msgbox "Blocked Countries:\n$ipsets" 20 40
    fi
}

# Function to block a port
block_port() {
    local port
    port=$(dialog --inputbox "Enter port number (1-65535):" 10 40 2>&1 >/dev/tty) || return
    if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        dialog --msgbox "Invalid port number! Must be between 1-65535." 10 40
        return
    fi

    iptables -C INPUT -p tcp --dport "$port" -j DROP 2>/dev/null || \
        sudo iptables -A INPUT -p tcp --dport "$port" -j DROP
    iptables -C INPUT -p udp --dport "$port" -j DROP 2>/dev/null || \
        sudo iptables -A INPUT -p udp --dport "$port" -j DROP

    dialog --msgbox "Port $port blocked successfully!" 10 40
}

# Function to unblock a port
unblock_port() {
    local port
    port=$(dialog --inputbox "Enter port number (1-65535):" 10 40 2>&1 >/dev/tty) || return
    if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        dialog --msgbox "Invalid port number! Must be between 1-65535." 10 40
        return
    fi

    sudo iptables -D INPUT -p tcp --dport "$port" -j DROP 2>/dev/null || true
    sudo iptables -D INPUT -p udp --dport "$port" -j DROP 2>/dev/null || true

    dialog --msgbox "Port $port unblocked successfully!" 10 40
}

# Function to display blocked ports
show_blocked_ports() {
    local blocked_ports
    blocked_ports=$(sudo iptables -L INPUT -v -n | grep -i drop | grep -oP 'dpt:\d+' | sort -u | sed 's/dpt://' || true)
    if [ -z "$blocked_ports" ]; then
        dialog --msgbox "No ports are currently blocked!" 10 40
    else
        dialog --msgbox "Blocked Ports:\n$blocked_ports" 20 40
    fi
}

# Main menu
while true; do
    choice=$(dialog --menu "Firewall Manager" 20 60 8 \
        1 "Block a Country" \
        2 "Unblock a Country" \
        3 "Show Blocked Countries" \
        4 "Block a Port" \
        5 "Unblock a Port" \
        6 "Show Blocked Ports" \
        7 "Exit" 2>&1 >/dev/tty) || break

    case $choice in
        1) block_country ;;
        2) unblock_country ;;
        3) show_blocked_countries ;;
        4) block_port ;;
        5) unblock_port ;;
        6) show_blocked_ports ;;
        7) break ;;
        *) dialog --msgbox "Invalid option!" 10 40 ;;
    esac
done

clear
echo "Firewall Manager exited. Goodbye!"
exit 0
